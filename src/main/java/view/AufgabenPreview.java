package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import entity.aufgabe.Aufgabe;
import entity.aufgabe.MultipleChoiceAufgabe;
import entity.enums.Aufgabentyp;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * 20.05 T.Joswig u. K.Kubisch Preview
 */
public class AufgabenPreview extends JDialog implements ActionListener {
    private Aufgabe aufgabe;
    private JPanel mainPanel;
    private JPanel pnlMultipleChoice;
    private JButton btnZurueck;
    private JTextField txtfAufgabenstellung;
    private JLabel lblBild;
    private JLabel lblBearbeitungzeit;
    private JLabel lblBearbeitungszeitWert;
    private JLabel lblPunktzahl;
    private JLabel lblPunktzahlWert;
    private JLabel lblAufgabentypWert;
    private JRadioButton antwort1;
    private JRadioButton antwort2;
    private JRadioButton antwort3;
    private JRadioButton antwort4;

    public AufgabenPreview(Aufgabe aufgabe) {
        this.aufgabe = aufgabe;
        this.setContentPane(mainPanel);
        btnZurueck.addActionListener(this);

        if (aufgabe.getAufgabentyp().equals(Aufgabentyp.MultipleChoice)) {
            showMcPanel();
        } else {
            hideMcPanel();
        }

        setTitle(aufgabe.getName());
        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        txtfAufgabenstellung.setText(aufgabe.getTextbeschreibung());
        lblBearbeitungszeitWert.setText(aufgabe.getBearbeitungszeit() + " min");
        lblPunktzahlWert.setText(aufgabe.getPunktewert() + " P.");
        lblAufgabentypWert.setText((aufgabe.getAufgabentyp().getCode()));

        if (aufgabe.getAufgabenstellungsbild() != null) {
            lblBild.setIcon(new ImageIcon(aufgabe.getAufgabenstellungsbild()));
        }

        this.setModalityType(ModalityType.APPLICATION_MODAL);
        this.setModalExclusionType(ModalExclusionType.APPLICATION_EXCLUDE);
        this.pack();
        Dimension display = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((display.getSize().width - this.getSize().width) / 2, (display.getSize().height - this.getSize().height) / 2);
        this.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == this.btnZurueck) {
            this.dispose();
        }
    }

    public void showMcPanel() {
        this.pnlMultipleChoice.setVisible(true);

        MultipleChoiceAufgabe mCAufgabe = (MultipleChoiceAufgabe) this.aufgabe;
        List moeglichkeiten = mCAufgabe.getAntwortmoeglichkeiten();

        if (moeglichkeiten.size() == 4) {
            antwort1.setText((String) moeglichkeiten.get(0));
            antwort2.setText((String) moeglichkeiten.get(1));
            antwort3.setText((String) moeglichkeiten.get(2));
            antwort4.setText((String) moeglichkeiten.get(3));
        } else if (moeglichkeiten.size() == 3) {
            antwort1.setText((String) moeglichkeiten.get(0));
            antwort2.setText((String) moeglichkeiten.get(1));
            antwort3.setText((String) moeglichkeiten.get(2));
            antwort4.setVisible(false);
        } else {
            antwort1.setText((String) moeglichkeiten.get(0));
            antwort2.setText((String) moeglichkeiten.get(1));
            antwort3.setVisible(false);
            antwort4.setVisible(false);
        }
        antwort1.setEnabled(false);
        antwort2.setEnabled(false);
        antwort3.setEnabled(false);
        antwort4.setEnabled(false);

        this.update(this.getGraphics());
    }

    public void hideMcPanel() {
        this.pnlMultipleChoice.setVisible(false);
        this.update(this.getGraphics());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(8, 5, new Insets(0, 0, 0, 0), -1, -1));
        txtfAufgabenstellung = new JTextField();
        txtfAufgabenstellung.setEditable(false);
        mainPanel.add(txtfAufgabenstellung, new GridConstraints(1, 1, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, 200), new Dimension(150, 200), null, 0, false));
        lblBild = new JLabel();
        lblBild.setText("");
        mainPanel.add(lblBild, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(200, 200), new Dimension(200, 200), null, 0, false));
        btnZurueck = new JButton();
        btnZurueck.setText("ZurÃ¼ck");
        mainPanel.add(btnZurueck, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lblBearbeitungzeit = new JLabel();
        lblBearbeitungzeit.setText("Bearbeitungzeit:");
        panel1.add(lblBearbeitungzeit, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lblPunktzahl = new JLabel();
        lblPunktzahl.setText("Punktzahl:");
        panel1.add(lblPunktzahl, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lblPunktzahlWert = new JLabel();
        lblPunktzahlWert.setText("\"Punkte\"");
        panel1.add(lblPunktzahlWert, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, -1), new Dimension(100, -1), null, 0, false));
        lblBearbeitungszeitWert = new JLabel();
        lblBearbeitungszeitWert.setText("\"Zeit\"");
        panel1.add(lblBearbeitungszeitWert, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, -1), new Dimension(100, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Aufgabentyp: ");
        panel1.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lblAufgabentypWert = new JLabel();
        lblAufgabentypWert.setText("\"Einfachantwort\"");
        panel1.add(lblAufgabentypWert, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(100, -1), new Dimension(100, -1), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        mainPanel.add(spacer2, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        mainPanel.add(spacer3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        mainPanel.add(spacer4, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        mainPanel.add(spacer5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        mainPanel.add(spacer6, new GridConstraints(7, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pnlMultipleChoice = new JPanel();
        pnlMultipleChoice.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(pnlMultipleChoice, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        antwort1 = new JRadioButton();
        antwort1.setText("RadioButton");
        pnlMultipleChoice.add(antwort1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        antwort2 = new JRadioButton();
        antwort2.setText("RadioButton");
        pnlMultipleChoice.add(antwort2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        antwort3 = new JRadioButton();
        antwort3.setText("RadioButton");
        pnlMultipleChoice.add(antwort3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        antwort4 = new JRadioButton();
        antwort4.setText("RadioButton");
        pnlMultipleChoice.add(antwort4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
